name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESSTOKEN }}

      # 3. Docker 이미지 remove
      - name: Remove old Docker image
        run: |
          docker rmi ${{ secrets.DOCKER_HUB_USERNAME }}/theroom-frontend:latest || true
          docker rmi ${{ secrets.DOCKER_HUB_USERNAME }}/theroom-backend:latest || true
          docker rmi ${{ secrets.DOCKER_HUB_USERNAME }}/theroom-nginx:latest || true

      # 4. Docker 이미지 build
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/theroom-frontend:latest ./frontend
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/theroom-backend:latest ./backend
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/theroom-nginx:latest ./nginx

      # 5. Docker 이미지 push
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/theroom-frontend:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/theroom-backend:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/theroom-nginx:latest

      # 6. docker-compose.yml, .env 파일 생성
      - name: Create docker-compose.yml and .env files
        run: |
          echo "${{ secrets.DOCKER_COMPOSE_YML_BASE64_ENCODE }}" | base64 -d > docker-compose.yml
          echo "DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}" >> .env
          echo "${{ secrets.FRONT_ENV }}" > front.env
          echo "${{ secrets.BACK_ENV }}" > back.env
          echo "${{ secrets.NGINX_HTTP_CONF_BASE64_ENCODE }}" | base64 -d > nginx_http.conf
          echo "${{ secrets.NGINX_HTTPS_CONF_BASE64_ENCODE }}" | base64 -d > nginx_https.conf
    
      # 7. 파일 전송 (scp) - docker-compose.yml, .env, .conf ec2에 전송
      - name: Upload Files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "docker-compose.yml,.env,front.env,back.env,nginx_http.conf,nginx_https.conf"
          target: "~/app"

      # 8. EC2에서 컨테이너 실행
      - name: Deploy on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd ~/app
            cp ./nginx_http.conf ./nginx.conf
            docker-compose down
            docker-compose pull
            docker-compose up -d
      
      # 9. SSL 인증서 존재 여부 확인
      - name: Check if SSL certificate exists
        id: check_cert
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            if [ -f "/etc/letsencrypt/live/theroomcicd.site/fullchain.pem" ]; then
              echo "SSL_STATUS=true" >> /tmp/github_env
            else
              echo "SSL_STATUS=false" >> /tmp/github_env
            fi

      - name: Fetch SSL Status
        run: |
          echo "SSL_STATUS=$(ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'cat /tmp/github_env | cut -d= -f2')" >> $GITHUB_ENV
      
      # 11. SSL 인증서가 존재하지 않으면 발급
      - name: Issue SSL Certificate with Certbot
        if: env.SSL_STATUS == 'false'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            docker run --rm --name certbot \
              -v /etc/letsencrypt:/etc/letsencrypt \
              -v /var/lib/letsencrypt:/var/lib/letsencrypt \
              certbot/certbot certonly --webroot -w /usr/share/nginx/html \
              -d theroomcicd.site -d www.theroomcicd.site --email seogyeonghwan48@gmail.com \
              --agree-tos --no-eff-email --non-interactive
    
      # 12. HTTPS 적용이후, nginx.conf 변경 및 NGINX 재시작
      - name: Replace Nginx Config with HTTPS Version
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd ~/app
            cp ./nginx_https.conf ./nginx.conf
            docker restart theroom-nginx